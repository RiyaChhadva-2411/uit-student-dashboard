{"version":3,"sources":["Demo/UIElements/Basic/Button.js","App/components/MainCard.js","App/components/UcFirst.js"],"names":["BasicButton","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","overlay","text","outlineButtons","squareButtons","className","basicDropdownButton","button","title","id","Item","eventKey","splitDropdownButton","Divider","React","Component","MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","alignRight","Toggle","Menu","as","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","children","windowSize","UcFirst","string","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/15.00b37686.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n    ButtonToolbar,\r\n    Dropdown,\r\n    DropdownButton,\r\n    SplitButton\r\n} from 'react-bootstrap';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Card from \"../../../App/components/MainCard\";\r\nimport UcFirst from \"../../../App/components/UcFirst\";\r\n\r\nclass BasicButton extends React.Component {\r\n    render() {\r\n        const buttonVariants = [\r\n            'primary',\r\n            'secondary',\r\n            'success',\r\n            'danger',\r\n            'warning',\r\n            'info',\r\n            'light',\r\n            'dark',\r\n        ];\r\n\r\n        const buttonOptions = [\r\n            {variant: 'primary', icon:'feather icon-thumbs-up'},\r\n            {variant: 'secondary', icon:'feather icon-camera'},\r\n            {variant: 'success', icon:'feather icon-check-circle'},\r\n            {variant: 'danger', icon:'feather icon-slash'},\r\n            {variant: 'warning', icon:'feather icon-alert-triangle'},\r\n            {variant: 'info', icon:'feather icon-info'}\r\n        ];\r\n\r\n        const basicButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\r\n                <Button variant={variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const outlineButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-'+variant}</Tooltip>}>\r\n                <Button variant={'outline-'+variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const squareButtons = buttonVariants.map((variant, idx) => <Button key={idx} className='btn-square' variant={variant}><UcFirst text={variant} /></Button>);\r\n\r\n\r\n        const basicDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <DropdownButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                </DropdownButton>\r\n            );\r\n        });\r\n\r\n        const splitDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <SplitButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-split-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                    className=\"mr-2 mb-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </SplitButton>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Default\">\r\n                            <p>use <code>variant=\"*\"</code> props in component <code>Button</code> to get various button</p>\r\n                            {basicButtons}\r\n                            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\r\n                                <Button variant=\"link\">Link</Button>\r\n                            </OverlayTrigger>\r\n                        </Card>\r\n                        <Card title=\"Outline\">\r\n                            <p>use <code>variant=\"outline-*\"</code> props in component <code>Button</code> to get various outline button</p>\r\n                            {outlineButtons}\r\n                        </Card>\r\n                        <Card title=\"Square Button\">\r\n                            <p>use <code>className=\"btn-square\"</code> props in component <code>Button</code> to get square button</p>\r\n                            {squareButtons}\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Basic Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {basicDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                        <Card title=\"Split Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {splitDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicButton;\r\n","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: false,\r\n        cardRemove: false\r\n    };\r\n\r\n    cardReloadHandler = () => {\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [];\r\n\r\n        if (this.state.isOption) {\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restore' : 'Maximize'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expand' : 'Collapse'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n","import React from 'react';\r\n\r\nclass UcFirst extends React.Component {\r\n    render() {\r\n        const string = this.props.text;\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n}\r\n\r\nexport default UcFirst;"],"sourceRoot":""}